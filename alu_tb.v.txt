//TESTBENCH FOR ALU MODULE RUN THE CODE IN VIVADO 


module alu_tb;

    reg [15:0] operand1;
    reg [15:0] operand2;
    reg [3:0] alu_control;
    wire [15:0] result;

    
    alu uut(
        .operand1(operand1),
        .operand2(operand2),
        .alu_control(alu_control),
        .result(result)
    );

    initial begin
        // IF USING EDAPLAYGROUND INCLUDE THE $dumpfile 
       // $dumpfile("alu_tb.vcd");
       // $dumpvars(0, alu_tb);

       
        operand1 = 16'd0;
        operand2 = 16'd0;
        alu_control = 4'b0000;

        //  ADD
        #10 operand1 = 16'd10; operand2 = 16'd5; alu_control = 4'b0000;
        #10 operand1 = 16'd20; operand2 = 16'd25; alu_control = 4'b0000;

        //  SUB
        #10 operand1 = 16'd30; operand2 = 16'd15; alu_control = 4'b0001;
        #10 operand1 = 16'd50; operand2 = 16'd25; alu_control = 4'b0001;

        //  AND
        #10 operand1 = 16'd15; operand2 = 16'd30; alu_control = 4'b0010;
        #10 operand1 = 16'd255; operand2 = 16'd15; alu_control = 4'b0010;

        // XOR
        #10 operand1 = 16'd15; operand2 = 16'd30; alu_control = 4'b0011;
        #10 operand1 = 16'd255; operand2 = 16'd15; alu_control = 4'b0011;

        // SHIFT LEFT
        #10 operand1 = 16'd1; operand2 = 16'd1; alu_control = 4'b0100;
        #10 operand1 = 16'd3; operand2 = 16'd2; alu_control = 4'b0100;

        // SHIFT RIGHT
        #10 operand1 = 16'd8; operand2 = 16'd1; alu_control = 4'b0101;
        #10 operand1 = 16'd16; operand2 = 16'd2; alu_control = 4'b0101;

        #10 $finish;
    end

endmodule
